for (i in 1:nrow(anc_predictors_settings))              #create backup-columns of primary predictors
{
col_name=anc_predictors_settings$name[i]
mydata[,paste(col_name,"_org",sep="")] =  mydata[,col_name]
}
datenum=mydata$datenum  #save date column and convert data frame to matrix (speed up computations)
mydata$datenum=NULL
mydata=as.matrix(mydata)
nlag=1                #shift by single timestep  (to match Alex' scheme: ancillary predictor of level 0 is just shifted)
anc_predictors_settings$n_aggregation_levels = anc_predictors_settings$n_aggregation_levels-1 #level 0 aggregation is already done with the next step
col_names = anc_predictors_settings$name
mydata[(nlag+1):nrow(mydata), col_names]          = mydata[1:(nrow(mydata)-nlag),col_names]
n_datacolumns= ncol(mydata)          #number of data columns in dataset
datacolumns4derivatives = which(dimnames(mydata)[[2]] %in% anc_predictors_settings$name)    ##which datacolumns will be used to construct derived predictors (use those containing "rain" or "dummy" in the name)
n_datacolumns4derivatives = length(datacolumns4derivatives)               #number of datacolumns used for building ancillary predictors
mydata=cbind(mydata, array(NA,c(nrow(mydata), sum(anc_predictors_settings$n_aggregation_levels) ))) #enlarge matrix
for (i in 1:nrow(anc_predictors_settings))         #loop over all primary predictors
{
source_column = which(dimnames(mydata)[[2]] == anc_predictors_settings$name[i])       #column index of current primary predictor
if (length(source_column)==0) stop(paste("column",anc_predictors_settings$name[i],"not found"))
p_prev  =-1
cum_period_real=1              #number of timesteps to be included in cumulated sum
cum_start = 0                  #start of aggregation window with respect to current timestep
print(paste("primary predictor",i,"of",nrow(anc_predictors_settings),":",anc_predictors_settings$name[i]))
for (aggregation_step in 1:anc_predictors_settings$n_aggregation_levels[i])          #loop through all data aggregation levels to construct ancillary predictors
{
p=aggregation_step/max(anc_predictors_settings$n_aggregation_levels[i])*100
if (p>p_prev+ 0.5)   #do printout of percentage in 0.5 % steps (progress output)
{
cat(paste(p,"%\n"))
flush.console()
p_prev=p
}
cum_period_real=cum_period_real*anc_predictors_settings$aggregation_steps_factor[i]              #number of timesteps to be included in cumulated sum (real number)
cum_period = round(cum_period_real)       #round real number to define aggregation window
cum_start = cum_start - cum_period
target_columns = n_datacolumns + sum(anc_predictors_settings$n_aggregation_levels[i-1]) +
+aggregation_step     #destination column where to put the aggregated data
dimnames(mydata)[[2]][target_columns] = paste(anc_predictors_settings$name[i],cum_period*tres,sep="_")
if (-cum_start+1 > nrow(mydata)) next
if(cum_period==1) #no actual cumulation, just offset by cumperiod
mydata[(cum_period+1):nrow(mydata),target_columns]          = mydata   [1:(nrow(mydata)-cum_period), source_column] else
for (j in ((-cum_start+1):nrow(mydata)))      #actual aggregation
mydata[j,target_columns] = apply(as.matrix(mydata[j + (cum_start : (cum_start+cum_period-1)), source_column],ncol=1), 2 ,sum,na.rm=FALSE)
}
dimnames(mydata)[[2]][dimnames(mydata)[[2]] == anc_predictors_settings$name[i]                     ] =
paste(anc_predictors_settings$name[i],tres,sep="")              #denote primary predictor as first shifted time series
dimnames(mydata)[[2]][dimnames(mydata)[[2]] == paste(anc_predictors_settings$name[i],"_org",sep="")] =
anc_predictors_settings$name[i]                                #restore column name of primary predictor
}
dimnames(mydata)
target_columns
i=1
p=aggregation_step/max(anc_predictors_settings$n_aggregation_levels[i])*100
if (p>p_prev+ 0.5)   #do printout of percentage in 0.5 % steps (progress output)
{
cat(paste(p,"%\n"))
flush.console()
p_prev=p
}
cum_period_real=cum_period_real*anc_predictors_settings$aggregation_steps_factor[i]              #number of timesteps to be included in cumulated sum (real number)
cum_period = round(cum_period_real)       #round real number to define aggregation window
cum_start = cum_start - cum_period
target_columns = n_datacolumns + sum(anc_predictors_settings$n_aggregation_levels[i-1]) +
+aggregation_step
source_column = which(dimnames(mydata)[[2]] == anc_predictors_settings$name[i])       #column index of current primary predictor
if (length(source_column)==0) stop(paste("column",anc_predictors_settings$name[i],"not found"))
p_prev  =-1
cum_period_real=1              #number of timesteps to be included in cumulated sum
cum_start = 0                  #start of aggregation window with respect to current timestep
print(paste("primary predictor",i,"of",nrow(anc_predictors_settings),":",anc_predictors_settings$name[i]))
aggregation_step
source_column = which(dimnames(mydata)[[2]] == anc_predictors_settings$name[i])       #column index of current primary predictor
if (length(source_column)==0) stop(paste("column",anc_predictors_settings$name[i],"not found"))
p_prev  =-1
cum_period_real=1              #number of timesteps to be included in cumulated sum
cum_start = 0                  #start of aggregation window with respect to current timestep
print(paste("primary predictor",i,"of",nrow(anc_predictors_settings),":",anc_predictors_settings$name[i]))
for (aggregation_step in 1:anc_predictors_settings$n_aggregation_levels[i])          #loop through all data aggregation levels to construct ancillary predictors
{
p=aggregation_step/max(anc_predictors_settings$n_aggregation_levels[i])*100
if (p>p_prev+ 0.5)   #do printout of percentage in 0.5 % steps (progress output)
{
cat(paste(p,"%\n"))
flush.console()
p_prev=p
}
cum_period_real=cum_period_real*anc_predictors_settings$aggregation_steps_factor[i]              #number of timesteps to be included in cumulated sum (real number)
cum_period = round(cum_period_real)       #round real number to define aggregation window
cum_start = cum_start - cum_period
target_columns = n_datacolumns + sum(anc_predictors_settings$n_aggregation_levels[i-1]) +
+aggregation_step     #destination column where to put the aggregated data
dimnames(mydata)[[2]][target_columns] = paste(anc_predictors_settings$name[i],cum_period*tres,sep="_")
if (-cum_start+1 > nrow(mydata)) next
if(cum_period==1) #no actual cumulation, just offset by cumperiod
mydata[(cum_period+1):nrow(mydata),target_columns]          = mydata   [1:(nrow(mydata)-cum_period), source_column] else
for (j in ((-cum_start+1):nrow(mydata)))      #actual aggregation
mydata[j,target_columns] = apply(as.matrix(mydata[j + (cum_start : (cum_start+cum_period-1)), source_column],ncol=1), 2 ,sum,na.rm=FALSE)
}
dimnames(mydata)[[2]][dimnames(mydata)[[2]] == anc_predictors_settings$name[i]                     ] =
paste(anc_predictors_settings$name[i],tres,sep="")              #denote primary predictor as first shifted time series
dimnames(mydata)[[2]][dimnames(mydata)[[2]] == paste(anc_predictors_settings$name[i],"_org",sep="")] =
anc_predictors_settings$name[i]                                #restore column name of primary predictor
dimnames(mydata)
i
sum(anc_predictors_settings$n_aggregation_levels[i-1])
aggregation_step
n_datacolumns
anc_predictors_settings$n_aggregation_levels
# generate ancillary predictors from rainfall data
source("../settings.R")
precip_data = read.table(paste(precip_data_file, "_corrected", sep=""), header = TRUE, sep = "\t", dec = ".", na.strings = c("NaN","NA"), stringsAsFactors=F)
precip_data$datenum    = as.POSIXct(strptime(precip_data$date, format=fmt_precip, tz="GMT"))  #convert string to date
precip_data$date       = NULL                                    #discard string colummn
ssc_data = read.table(ssc_data_file, header = TRUE, sep = "\t", dec = ".", na.strings = c("NaN","NA"), stringsAsFactors=F)
ssc_data$datenum    = as.POSIXct(strptime(ssc_data$date, format=fmt_ssc, tz="GMT"))  #convert string to date
ssc_data$date       = NULL                                      #discard string colummn
discharge_data = read.table(discharge_data_file, header = TRUE, sep = "\t", dec = ".", na.strings = c("NaN","NA"), stringsAsFactors=F)
discharge_data$datenum    = as.POSIXct(strptime(discharge_data$date, format=fmt_discharge, tz="GMT"))  #convert string to date
discharge_data$date       = NULL                                      #discard string colummn
mydata=merge(precip_data,ssc_data,all = TRUE)                              #merge precip data with ssc-data
rain.gauges <- c("rain_Barasona", "rain_Baserca", "rain_Calvera", "rain_Campo",            ## Set names of rain gauges
"rain_Capella", "rain_Casarella", "rain_Castigaleu", "rain_Cerler",
"rain_Chordal", "rain_ElCiego", "rain_Grado", "rain_Eriste", "rain_Escales", "rain_Fallada",
"rain_LaComa", "rain_LesPaules", "rain_Llanos", "rain_Samper", "rain_SanMartin",
"rain_Ubiergo")
names(mydata)=c("datenum",rain.gauges,"ssc")   #rename columns of data frame
rm(precip_data)
rm(ssc_data)
mydata=merge(mydata,discharge_data,all = TRUE) #merge precip+ssc data with discharge-data
names(mydata)=c("datenum",rain.gauges,"ssc","discharge")                                               #rename columns of data frame
rm(discharge_data)
contiguous_time = seq(from=min(mydata$datenum),to=max(mydata$datenum),by=tres)  #create contiguous time line (opposed to intermittent bucket data)
mydata=merge(data.frame(datenum=contiguous_time),mydata,all = TRUE)
names(mydata)=c("datenum",rain.gauges,"ssc","discharge")                                               #rename columns of data frame
rm(contiguous_time)
mydata=mydata[min(which(!is.na(mydata[,"discharge"]))) +(1:1000),]     ##rr test option
mydatab=mydata
source("compute_ancillary_predictors.r")
for (i in 1:nrow(anc_predictors_settings))              #create backup-columns of primary predictors
{
col_name=anc_predictors_settings$name[i]
mydata[,paste(col_name,"_org",sep="")] =  mydata[,col_name]
}
datenum=mydata$datenum  #save date column and convert data frame to matrix (speed up computations)
mydata$datenum=NULL
mydata=as.matrix(mydata)
nlag=1                #shift by single timestep  (to match Alex' scheme: ancillary predictor of level 0 is just shifted)
anc_predictors_settings$n_aggregation_levels = anc_predictors_settings$n_aggregation_levels-1 #level 0 aggregation is already done with the next step
col_names = anc_predictors_settings$name
mydata[(nlag+1):nrow(mydata), col_names]          = mydata[1:(nrow(mydata)-nlag),col_names]
n_datacolumns= ncol(mydata)          #number of data columns in dataset
datacolumns4derivatives = which(dimnames(mydata)[[2]] %in% anc_predictors_settings$name)    ##which datacolumns will be used to construct derived predictors (use those containing "rain" or "dummy" in the name)
n_datacolumns4derivatives = length(datacolumns4derivatives)               #number of datacolumns used for building ancillary predictors
mydata=cbind(mydata, array(NA,c(nrow(mydata), sum(anc_predictors_settings$n_aggregation_levels) ))) #enlarge matrix
anc_predictors_settings= data.frame(
name=c(rain.gauges,"discharge"),
n_aggregation_levels = c(rep(9, length(rain.gauges)),4),
aggregation_steps_factor = c(rep(2, length(rain.gauges)),2),
stringsAsFactors = FALSE
)
for (i in 1:nrow(anc_predictors_settings))              #create backup-columns of primary predictors
{
col_name=anc_predictors_settings$name[i]
mydata[,paste(col_name,"_org",sep="")] =  mydata[,col_name]
}
datenum=mydata$datenum  #save date column and convert data frame to matrix (speed up computations)
mydata$datenum=NULL
mydata=as.matrix(mydata)
nlag=1                #shift by single timestep  (to match Alex' scheme: ancillary predictor of level 0 is just shifted)
anc_predictors_settings$n_aggregation_levels = anc_predictors_settings$n_aggregation_levels-1 #level 0 aggregation is already done with the next step
col_names = anc_predictors_settings$name
mydata[(nlag+1):nrow(mydata), col_names]          = mydata[1:(nrow(mydata)-nlag),col_names]
n_datacolumns= ncol(mydata)          #number of data columns in dataset
datacolumns4derivatives = which(dimnames(mydata)[[2]] %in% anc_predictors_settings$name)    ##which datacolumns will be used to construct derived predictors (use those containing "rain" or "dummy" in the name)
n_datacolumns4derivatives = length(datacolumns4derivatives)               #number of datacolumns used for building ancillary predictors
mydata=cbind(mydata, array(NA,c(nrow(mydata), sum(anc_predictors_settings$n_aggregation_levels) ))) #enlarge matrix
mydata=mydatab
for (i in 1:nrow(anc_predictors_settings))              #create backup-columns of primary predictors
{
col_name=anc_predictors_settings$name[i]
mydata[,paste(col_name,"_org",sep="")] =  mydata[,col_name]
}
datenum=mydata$datenum  #save date column and convert data frame to matrix (speed up computations)
mydata$datenum=NULL
mydata=as.matrix(mydata)
nlag=1                #shift by single timestep  (to match Alex' scheme: ancillary predictor of level 0 is just shifted)
anc_predictors_settings$n_aggregation_levels = anc_predictors_settings$n_aggregation_levels-1 #level 0 aggregation is already done with the next step
col_names = anc_predictors_settings$name
mydata[(nlag+1):nrow(mydata), col_names]          = mydata[1:(nrow(mydata)-nlag),col_names]
n_datacolumns= ncol(mydata)          #number of data columns in dataset
datacolumns4derivatives = which(dimnames(mydata)[[2]] %in% anc_predictors_settings$name)    ##which datacolumns will be used to construct derived predictors (use those containing "rain" or "dummy" in the name)
n_datacolumns4derivatives = length(datacolumns4derivatives)               #number of datacolumns used for building ancillary predictors
mydata=cbind(mydata, array(NA,c(nrow(mydata), sum(anc_predictors_settings$n_aggregation_levels) ))) #enlarge matrix
i=1
dimnames(mydata)
source_column = which(dimnames(mydata)[[2]] == anc_predictors_settings$name[i])       #column index of current primary predictor
if (length(source_column)==0) stop(paste("column",anc_predictors_settings$name[i],"not found"))
p_prev  =-1
cum_period_real=1              #number of timesteps to be included in cumulated sum
cum_start = 0                  #start of aggregation window with respect to current timestep
print(paste("primary predictor",i,"of",nrow(anc_predictors_settings),":",anc_predictors_settings$name[i]))
for (aggregation_step in 1:anc_predictors_settings$n_aggregation_levels[i])          #loop through all data aggregation levels to construct ancillary predictors
{
p=aggregation_step/max(anc_predictors_settings$n_aggregation_levels[i])*100
if (p>p_prev+ 0.5)   #do printout of percentage in 0.5 % steps (progress output)
{
cat(paste(p,"%\n"))
flush.console()
p_prev=p
}
cum_period_real=cum_period_real*anc_predictors_settings$aggregation_steps_factor[i]              #number of timesteps to be included in cumulated sum (real number)
cum_period = round(cum_period_real)       #round real number to define aggregation window
cum_start = cum_start - cum_period
target_columns = n_datacolumns + sum(anc_predictors_settings$n_aggregation_levels[i-1]) +
+aggregation_step     #destination column where to put the aggregated data
dimnames(mydata)[[2]][target_columns] = paste(anc_predictors_settings$name[i],cum_period*tres,sep="_")
if (-cum_start+1 > nrow(mydata)) next
if(cum_period==1) #no actual cumulation, just offset by cumperiod
mydata[(cum_period+1):nrow(mydata),target_columns]          = mydata   [1:(nrow(mydata)-cum_period), source_column] else
for (j in ((-cum_start+1):nrow(mydata)))      #actual aggregation
mydata[j,target_columns] = apply(as.matrix(mydata[j + (cum_start : (cum_start+cum_period-1)), source_column],ncol=1), 2 ,sum,na.rm=FALSE)
}
dimnames(mydata)[[2]][dimnames(mydata)[[2]] == anc_predictors_settings$name[i]                     ] =
paste(anc_predictors_settings$name[i],tres,sep="")              #denote primary predictor as first shifted time series
dimnames(mydata)[[2]][dimnames(mydata)[[2]] == paste(anc_predictors_settings$name[i],"_org",sep="")] =
anc_predictors_settings$name[i]
dimnames(mydata)[[2]]
anc_predictors_settings= data.frame(
name=c(rain.gauges,"discharge"),
n_aggregation_levels = c(rep(9, length(rain.gauges)),4),
aggregation_steps_factor = c(rep(2, length(rain.gauges)),2),
stringsAsFactors = FALSE
)
mydata=mydatab
for (i in 1:nrow(anc_predictors_settings))              #create backup-columns of primary predictors
{
col_name=anc_predictors_settings$name[i]
mydata[,paste(col_name,"_org",sep="")] =  mydata[,col_name]
}
datenum=mydata$datenum  #save date column and convert data frame to matrix (speed up computations)
mydata$datenum=NULL
mydata=as.matrix(mydata)
nlag=1                #shift by single timestep  (to match Alex' scheme: ancillary predictor of level 0 is just shifted)
anc_predictors_settings$n_aggregation_levels = anc_predictors_settings$n_aggregation_levels-1 #level 0 aggregation is already done with the next step
col_names = anc_predictors_settings$name
mydata[(nlag+1):nrow(mydata), col_names]          = mydata[1:(nrow(mydata)-nlag),col_names]
n_datacolumns= ncol(mydata)          #number of data columns in dataset
datacolumns4derivatives = which(dimnames(mydata)[[2]] %in% anc_predictors_settings$name)    ##which datacolumns will be used to construct derived predictors (use those containing "rain" or "dummy" in the name)
n_datacolumns4derivatives = length(datacolumns4derivatives)               #number of datacolumns used for building ancillary predictors
mydata=cbind(mydata, array(NA,c(nrow(mydata), sum(anc_predictors_settings$n_aggregation_levels) ))) #enlarge matrix
source_column = which(dimnames(mydata)[[2]] == anc_predictors_settings$name[i])       #column index of current primary predictor
if (length(source_column)==0) stop(paste("column",anc_predictors_settings$name[i],"not found"))
p_prev  =-1
cum_period_real=1              #number of timesteps to be included in cumulated sum
cum_start = 0                  #start of aggregation window with respect to current timestep
print(paste("primary predictor",i,"of",nrow(anc_predictors_settings),":",anc_predictors_settings$name[i]))
for (aggregation_step in 1:anc_predictors_settings$n_aggregation_levels[i])          #loop through all data aggregation levels to construct ancillary predictors
{
p=aggregation_step/max(anc_predictors_settings$n_aggregation_levels[i])*100
if (p>p_prev+ 0.5)   #do printout of percentage in 0.5 % steps (progress output)
{
cat(paste(p,"%\n"))
flush.console()
p_prev=p
}
cum_period_real=cum_period_real*anc_predictors_settings$aggregation_steps_factor[i]              #number of timesteps to be included in cumulated sum (real number)
cum_period = round(cum_period_real)       #round real number to define aggregation window
cum_start = cum_start - cum_period
target_columns = n_datacolumns + sum(anc_predictors_settings$n_aggregation_levels[i-1]) +
+aggregation_step     #destination column where to put the aggregated data
dimnames(mydata)[[2]][target_columns] = paste(anc_predictors_settings$name[i],cum_period*tres,sep="_")
if (-cum_start+1 > nrow(mydata)) next
if(cum_period==1) #no actual cumulation, just offset by cumperiod
mydata[(cum_period+1):nrow(mydata),target_columns]          = mydata   [1:(nrow(mydata)-cum_period), source_column] else
for (j in ((-cum_start+1):nrow(mydata)))      #actual aggregation
mydata[j,target_columns] = apply(as.matrix(mydata[j + (cum_start : (cum_start+cum_period-1)), source_column],ncol=1), 2 ,sum,na.rm=FALSE)
}
dimnames(mydata)[[2]][dimnames(mydata)[[2]] == anc_predictors_settings$name[i]                     ] =
paste(anc_predictors_settings$name[i],tres,sep="")              #denote primary predictor as first shifted time series
dimnames(mydata)[[2]][dimnames(mydata)[[2]] == paste(anc_predictors_settings$name[i],"_org",sep="")] =
anc_predictors_settings$name[i]                                #restore column name of primary predictor
dimnames(mydata)
i
anc_predictors_settings= data.frame(
name=c(rain.gauges,"discharge"),
n_aggregation_levels = c(rep(9, length(rain.gauges)),4),
aggregation_steps_factor = c(rep(2, length(rain.gauges)),2),
stringsAsFactors = FALSE
)
mydata=mydatab
for (i in 1:nrow(anc_predictors_settings))              #create backup-columns of primary predictors
{
col_name=anc_predictors_settings$name[i]
mydata[,paste(col_name,"_org",sep="")] =  mydata[,col_name]
}
datenum=mydata$datenum  #save date column and convert data frame to matrix (speed up computations)
mydata$datenum=NULL
mydata=as.matrix(mydata)
nlag=1                #shift by single timestep  (to match Alex' scheme: ancillary predictor of level 0 is just shifted)
anc_predictors_settings$n_aggregation_levels = anc_predictors_settings$n_aggregation_levels-1 #level 0 aggregation is already done with the next step
col_names = anc_predictors_settings$name
mydata[(nlag+1):nrow(mydata), col_names]          = mydata[1:(nrow(mydata)-nlag),col_names]
n_datacolumns= ncol(mydata)          #number of data columns in dataset
datacolumns4derivatives = which(dimnames(mydata)[[2]] %in% anc_predictors_settings$name)    ##which datacolumns will be used to construct derived predictors (use those containing "rain" or "dummy" in the name)
n_datacolumns4derivatives = length(datacolumns4derivatives)               #number of datacolumns used for building ancillary predictors
mydata=cbind(mydata, array(NA,c(nrow(mydata), sum(anc_predictors_settings$n_aggregation_levels) ))) #enlarge matrix
dimnames(mydata)
dimnames(mydata)[[2]]
i=1
source_column = which(dimnames(mydata)[[2]] == anc_predictors_settings$name[i])       #column index of current primary predictor
if (length(source_column)==0) stop(paste("column",anc_predictors_settings$name[i],"not found"))
p_prev  =-1
cum_period_real=1              #number of timesteps to be included in cumulated sum
cum_start = 0                  #start of aggregation window with respect to current timestep
print(paste("primary predictor",i,"of",nrow(anc_predictors_settings),":",anc_predictors_settings$name[i]))
for (aggregation_step in 1:anc_predictors_settings$n_aggregation_levels[i])          #loop through all data aggregation levels to construct ancillary predictors
{
p=aggregation_step/max(anc_predictors_settings$n_aggregation_levels[i])*100
if (p>p_prev+ 0.5)   #do printout of percentage in 0.5 % steps (progress output)
{
cat(paste(p,"%\n"))
flush.console()
p_prev=p
}
cum_period_real=cum_period_real*anc_predictors_settings$aggregation_steps_factor[i]              #number of timesteps to be included in cumulated sum (real number)
cum_period = round(cum_period_real)       #round real number to define aggregation window
cum_start = cum_start - cum_period
target_columns = n_datacolumns + sum(anc_predictors_settings$n_aggregation_levels[i-1]) +
+aggregation_step     #destination column where to put the aggregated data
dimnames(mydata)[[2]][target_columns] = paste(anc_predictors_settings$name[i],cum_period*tres,sep="_")
if (-cum_start+1 > nrow(mydata)) next
if(cum_period==1) #no actual cumulation, just offset by cumperiod
mydata[(cum_period+1):nrow(mydata),target_columns]          = mydata   [1:(nrow(mydata)-cum_period), source_column] else
for (j in ((-cum_start+1):nrow(mydata)))      #actual aggregation
mydata[j,target_columns] = apply(as.matrix(mydata[j + (cum_start : (cum_start+cum_period-1)), source_column],ncol=1), 2 ,sum,na.rm=FALSE)
}
dimnames(mydata)[[2]][dimnames(mydata)[[2]] == anc_predictors_settings$name[i]                     ] =
paste(anc_predictors_settings$name[i],tres,sep="")              #denote primary predictor as first shifted time series
dimnames(mydata)[[2]][dimnames(mydata)[[2]] == paste(anc_predictors_settings$name[i],"_org",sep="")] =
anc_predictors_settings$name[i]
dimnames(mydata)[[2]]
i=2
source_column = which(dimnames(mydata)[[2]] == anc_predictors_settings$name[i])       #column index of current primary predictor
if (length(source_column)==0) stop(paste("column",anc_predictors_settings$name[i],"not found"))
p_prev  =-1
cum_period_real=1              #number of timesteps to be included in cumulated sum
cum_start = 0                  #start of aggregation window with respect to current timestep
print(paste("primary predictor",i,"of",nrow(anc_predictors_settings),":",anc_predictors_settings$name[i]))
for (aggregation_step in 1:anc_predictors_settings$n_aggregation_levels[i])          #loop through all data aggregation levels to construct ancillary predictors
{
p=aggregation_step/max(anc_predictors_settings$n_aggregation_levels[i])*100
if (p>p_prev+ 0.5)   #do printout of percentage in 0.5 % steps (progress output)
{
cat(paste(p,"%\n"))
flush.console()
p_prev=p
}
cum_period_real=cum_period_real*anc_predictors_settings$aggregation_steps_factor[i]              #number of timesteps to be included in cumulated sum (real number)
cum_period = round(cum_period_real)       #round real number to define aggregation window
cum_start = cum_start - cum_period
target_columns = n_datacolumns + sum(anc_predictors_settings$n_aggregation_levels[i-1]) +
+aggregation_step     #destination column where to put the aggregated data
dimnames(mydata)[[2]][target_columns] = paste(anc_predictors_settings$name[i],cum_period*tres,sep="_")
if (-cum_start+1 > nrow(mydata)) next
if(cum_period==1) #no actual cumulation, just offset by cumperiod
mydata[(cum_period+1):nrow(mydata),target_columns]          = mydata   [1:(nrow(mydata)-cum_period), source_column] else
for (j in ((-cum_start+1):nrow(mydata)))      #actual aggregation
mydata[j,target_columns] = apply(as.matrix(mydata[j + (cum_start : (cum_start+cum_period-1)), source_column],ncol=1), 2 ,sum,na.rm=FALSE)
}
dimnames(mydata)[[2]][dimnames(mydata)[[2]] == anc_predictors_settings$name[i]                     ] =
paste(anc_predictors_settings$name[i],tres,sep="")              #denote primary predictor as first shifted time series
dimnames(mydata)[[2]][dimnames(mydata)[[2]] == paste(anc_predictors_settings$name[i],"_org",sep="")] =
anc_predictors_settings$name[i]
dimnames(mydata)[[2]]
nrow(anc_predictors_settings)
for (i in 1:20)         #loop over all primary predictors
{
source_column = which(dimnames(mydata)[[2]] == anc_predictors_settings$name[i])       #column index of current primary predictor
if (length(source_column)==0) stop(paste("column",anc_predictors_settings$name[i],"not found"))
p_prev  =-1
cum_period_real=1              #number of timesteps to be included in cumulated sum
cum_start = 0                  #start of aggregation window with respect to current timestep
print(paste("primary predictor",i,"of",nrow(anc_predictors_settings),":",anc_predictors_settings$name[i]))
for (aggregation_step in 1:anc_predictors_settings$n_aggregation_levels[i])          #loop through all data aggregation levels to construct ancillary predictors
{
p=aggregation_step/max(anc_predictors_settings$n_aggregation_levels[i])*100
if (p>p_prev+ 0.5)   #do printout of percentage in 0.5 % steps (progress output)
{
cat(paste(p,"%\n"))
flush.console()
p_prev=p
}
cum_period_real=cum_period_real*anc_predictors_settings$aggregation_steps_factor[i]              #number of timesteps to be included in cumulated sum (real number)
cum_period = round(cum_period_real)       #round real number to define aggregation window
cum_start = cum_start - cum_period
target_columns = n_datacolumns + sum(anc_predictors_settings$n_aggregation_levels[i-1]) +
+aggregation_step     #destination column where to put the aggregated data
dimnames(mydata)[[2]][target_columns] = paste(anc_predictors_settings$name[i],cum_period*tres,sep="_")
if (-cum_start+1 > nrow(mydata)) next
if(cum_period==1) #no actual cumulation, just offset by cumperiod
mydata[(cum_period+1):nrow(mydata),target_columns]          = mydata   [1:(nrow(mydata)-cum_period), source_column] else
for (j in ((-cum_start+1):nrow(mydata)))      #actual aggregation
mydata[j,target_columns] = apply(as.matrix(mydata[j + (cum_start : (cum_start+cum_period-1)), source_column],ncol=1), 2 ,sum,na.rm=FALSE)
}
dimnames(mydata)[[2]][dimnames(mydata)[[2]] == anc_predictors_settings$name[i]                     ] =
paste(anc_predictors_settings$name[i],tres,sep="")              #denote primary predictor as first shifted time series
dimnames(mydata)[[2]][dimnames(mydata)[[2]] == paste(anc_predictors_settings$name[i],"_org",sep="")] =
anc_predictors_settings$name[i]                                #restore column name of primary predictor
}
dimnames(mydata)[[2]]
target_columns
n_datacolumns
sum(anc_predictors_settings$n_aggregation_levels[i-1])
sum(anc_predictors_settings$n_aggregation_levels[1:i-1])
i=1
sum(anc_predictors_settings$n_aggregation_levels[1:i-1])
anc_predictors_settings= data.frame(
name=c(rain.gauges,"discharge"),
n_aggregation_levels = c(rep(9, length(rain.gauges)),4),
aggregation_steps_factor = c(rep(2, length(rain.gauges)),2),
stringsAsFactors = FALSE
)
mydata=mydatab
dimnames(mydata)[[2]]
for (i in 1:nrow(anc_predictors_settings))              #create backup-columns of primary predictors
{
col_name=anc_predictors_settings$name[i]
mydata[,paste(col_name,"_org",sep="")] =  mydata[,col_name]
}
datenum=mydata$datenum  #save date column and convert data frame to matrix (speed up computations)
mydata$datenum=NULL
mydata=as.matrix(mydata)
nlag=1                #shift by single timestep  (to match Alex' scheme: ancillary predictor of level 0 is just shifted)
anc_predictors_settings$n_aggregation_levels = anc_predictors_settings$n_aggregation_levels-1 #level 0 aggregation is already done with the next step
col_names = anc_predictors_settings$name
mydata[(nlag+1):nrow(mydata), col_names]          = mydata[1:(nrow(mydata)-nlag),col_names]
n_datacolumns= ncol(mydata)          #number of data columns in dataset
datacolumns4derivatives = which(dimnames(mydata)[[2]] %in% anc_predictors_settings$name)    ##which datacolumns will be used to construct derived predictors (use those containing "rain" or "dummy" in the name)
n_datacolumns4derivatives = length(datacolumns4derivatives)               #number of datacolumns used for building ancillary predictors
mydata=cbind(mydata, array(NA,c(nrow(mydata), sum(anc_predictors_settings$n_aggregation_levels) ))) #enlarge matrix
#for (i in 1:nrow(anc_predictors_settings))         #loop over all primary predictors
for (i in 1:20)         #loop over all primary predictors
{
source_column = which(dimnames(mydata)[[2]] == anc_predictors_settings$name[i])       #column index of current primary predictor
if (length(source_column)==0) stop(paste("column",anc_predictors_settings$name[i],"not found"))
p_prev  =-1
cum_period_real=1              #number of timesteps to be included in cumulated sum
cum_start = 0                  #start of aggregation window with respect to current timestep
print(paste("primary predictor",i,"of",nrow(anc_predictors_settings),":",anc_predictors_settings$name[i]))
for (aggregation_step in 1:anc_predictors_settings$n_aggregation_levels[i])          #loop through all data aggregation levels to construct ancillary predictors
{
p=aggregation_step/max(anc_predictors_settings$n_aggregation_levels[i])*100
if (p>p_prev+ 0.5)   #do printout of percentage in 0.5 % steps (progress output)
{
cat(paste(p,"%\n"))
flush.console()
p_prev=p
}
cum_period_real=cum_period_real*anc_predictors_settings$aggregation_steps_factor[i]              #number of timesteps to be included in cumulated sum (real number)
cum_period = round(cum_period_real)       #round real number to define aggregation window
cum_start = cum_start - cum_period
target_columns = n_datacolumns + sum(anc_predictors_settings$n_aggregation_levels[1:i-1]) +
+aggregation_step     #destination column where to put the aggregated data
dimnames(mydata)[[2]][target_columns] = paste(anc_predictors_settings$name[i],cum_period*tres,sep="_")
if (-cum_start+1 > nrow(mydata)) next
if(cum_period==1) #no actual cumulation, just offset by cumperiod
mydata[(cum_period+1):nrow(mydata),target_columns]          = mydata   [1:(nrow(mydata)-cum_period), source_column] else
for (j in ((-cum_start+1):nrow(mydata)))      #actual aggregation
mydata[j,target_columns] = apply(as.matrix(mydata[j + (cum_start : (cum_start+cum_period-1)), source_column],ncol=1), 2 ,sum,na.rm=FALSE)
}
dimnames(mydata)[[2]][dimnames(mydata)[[2]] == anc_predictors_settings$name[i]                     ] =
paste(anc_predictors_settings$name[i],tres,sep="")              #denote primary predictor as first shifted time series
dimnames(mydata)[[2]][dimnames(mydata)[[2]] == paste(anc_predictors_settings$name[i],"_org",sep="")] =
anc_predictors_settings$name[i]                                #restore column name of primary predictor
}
dimnames(mydata)[[2]]
anc_predictors_settings= data.frame(
name=c(rain.gauges,"discharge"),
n_aggregation_levels = c(rep(9, length(rain.gauges)),4),
aggregation_steps_factor = c(rep(2, length(rain.gauges)),2),
stringsAsFactors = FALSE
)
mydata=mydatab
dimnames(mydata)[[2]]
ancillary_data_filename = paste("ancillary_data_",tres,sep="") #name of file to store the generated data to
compute_ancillary_predictors(anc_predictors_settings = anc_predictors_settings,
ancillary_data_filename = ancillary_data_filename)
anc_predictors_settings= data.frame(
name=c(rain.gauges,"discharge"),
n_aggregation_levels = c(rep(9, length(rain.gauges)),4),
aggregation_steps_factor = c(rep(2, length(rain.gauges)),2),
stringsAsFactors = FALSE
)
mydata=mydatab
dimnames(mydata)[[2]]
source("compute_ancillary_predictors.r")
##settings for ancillary predictors to be derived
#name:                      name of primary predictor
#n_aggregation_levels:       number of progressive accumulation levels
#aggregation_steps_factor:  progression factor of aggregation time between levels
anc_predictors_settings= data.frame(
name=c(rain.gauges,"discharge"),
n_aggregation_levels = c(rep(9, length(rain.gauges)),4),
aggregation_steps_factor = c(rep(2, length(rain.gauges)),2),
stringsAsFactors = FALSE
)
ancillary_data_filename = paste("ancillary_data_",tres,sep="") #name of file to store the generated data to
compute_ancillary_predictors(anc_predictors_settings = anc_predictors_settings,
ancillary_data_filename = ancillary_data_filename)
cat("finished.\7\nPlease proceed with ../3_record_selection_discharge_model (see readme.txt)\n")
dimnames(mydata)[[2]]
